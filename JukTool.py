# ToolSorter ‚Äì Streamlit app (version avec pages d√©taill√©es)
# ------------------------------------------------------------
# Fonctionnalit√©s :
# - Ajouter des outils avec enrichissement IA optionnel
# - Recherche intelligente avec RapidFuzz
# - Import/export JSON fonctionnel
# - Configuration OpenAI
# - Pages d√©taill√©es pour chaque outil avec chat et liens
# ------------------------------------------------------------
# D√©marrage : streamlit run JukTool.py
# ------------------------------------------------------------

import os
import io
import json
import hashlib
import subprocess
import threading
import time
from datetime import datetime
from typing import List, Dict, Any

import streamlit as st
from rapidfuzz import fuzz
from duckduckgo_search import DDGS

try:
    from openai import OpenAI
except Exception:
    OpenAI = None

# === Configuration ===
DATA_DIR = "data"
DB_PATH = os.path.join(DATA_DIR, "tools.json")
CONFIG_PATH = os.path.join(DATA_DIR, "config.json")
COMMENTS_PATH = os.path.join(DATA_DIR, "comments.json")
LINKS_PATH = os.path.join(DATA_DIR, "external_links.json")
os.makedirs(DATA_DIR, exist_ok=True)

# === Streamlit config ===
st.set_page_config(page_title="ToolSorter", layout="wide")
st.title("üß∞ ToolSorter ‚Äì Gestionnaire d'outils IA")
st.caption("Ajoute, importe, cherche tes outils. Simple et efficace.")

# === Fonctions utilitaires ===
DEFAULT_DB = {"tools": []}
DEFAULT_COMMENTS = {}
DEFAULT_LINKS = {}

def load_db() -> Dict[str, Any]:
    if not os.path.exists(DB_PATH):
        save_db(DEFAULT_DB)
        return DEFAULT_DB.copy()
    try:
        with open(DB_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return DEFAULT_DB.copy()

def save_db(db: Dict[str, Any]) -> None:
    with open(DB_PATH, "w", encoding="utf-8") as f:
        json.dump(db, f, ensure_ascii=False, indent=2)
    
    # Synchronisation automatique avec GitHub si activ√©e
    if st.session_state.get("auto_sync_enabled", False):
        try:
            # Synchronisation en arri√®re-plan
            sync_thread = threading.Thread(target=lambda: git_sync_to_github(), daemon=True)
            sync_thread.start()
        except Exception:
            pass  # Ignorer les erreurs de sync pour ne pas bloquer la sauvegarde

def load_comments() -> Dict[str, Any]:
    if not os.path.exists(COMMENTS_PATH):
        save_comments(DEFAULT_COMMENTS)
        return DEFAULT_COMMENTS.copy()
    try:
        with open(COMMENTS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return DEFAULT_COMMENTS.copy()

def save_comments(comments: Dict[str, Any]) -> None:
    with open(COMMENTS_PATH, "w", encoding="utf-8") as f:
        json.dump(comments, f, ensure_ascii=False, indent=2)
    
    # Synchronisation automatique avec GitHub si activ√©e
    if st.session_state.get("auto_sync_enabled", False):
        try:
            # Synchronisation en arri√®re-plan
            sync_thread = threading.Thread(target=lambda: git_sync_to_github(), daemon=True)
            sync_thread.start()
        except Exception:
            pass  # Ignorer les erreurs de sync pour ne pas bloquer la sauvegarde

def load_links() -> Dict[str, Any]:
    if not os.path.exists(LINKS_PATH):
        save_links(DEFAULT_LINKS)
        return DEFAULT_LINKS.copy()
    try:
        with open(LINKS_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return DEFAULT_LINKS.copy()

def save_links(links: Dict[str, Any]) -> None:
    with open(LINKS_PATH, "w", encoding="utf-8") as f:
        json.dump(links, f, ensure_ascii=False, indent=2)
    
    # Synchronisation automatique avec GitHub si activ√©e
    if st.session_state.get("auto_sync_enabled", False):
        try:
            # Synchronisation en arri√®re-plan
            sync_thread = threading.Thread(target=lambda: git_sync_to_github(), daemon=True)
            sync_thread.start()
        except Exception:
            pass  # Ignorer les erreurs de sync pour ne pas bloquer la sauvegarde

def normalize_kw(s: str) -> List[str]:
    if not s:
        return []
    parts = [p.strip().lower() for p in s.replace(",", ";").split(";")]
    return [p for p in parts if p]

def euros(n: int) -> str:
    try:
        n = max(1, min(5, int(n)))
    except Exception:
        n = 3
    return "üí∂" * n

def tool_id(obj: Dict[str, Any]) -> str:
    payload = (obj.get("name", "") + "|" + obj.get("link", "")).strip().lower()
    return hashlib.sha1(payload.encode("utf-8")).hexdigest()[:16]

def dedupe_tools(tools: List[Dict[str, Any]]) -> List[Dict[str, Any]]:
    seen = set()
    out = []
    for t in tools:
        tid = t.get("id") or tool_id(t)
        if tid not in seen:
            seen.add(tid)
            t["id"] = tid
            out.append(t)
    return out

# === Configuration OpenAI ===
DEFAULT_CONFIG = {
    "openai_api_key": "",
    "openai_model": "gpt-4o-mini"
}

def load_config() -> Dict[str, Any]:
    if not os.path.exists(CONFIG_PATH):
        save_config(DEFAULT_CONFIG)
        return DEFAULT_CONFIG.copy()
    try:
        with open(CONFIG_PATH, "r", encoding="utf-8") as f:
            return json.load(f)
    except Exception:
        return DEFAULT_CONFIG.copy()

def save_config(cfg: Dict[str, Any]) -> None:
    with open(CONFIG_PATH, "w", encoding="utf-8") as f:
        json.dump(cfg, f, ensure_ascii=False, indent=2)

def get_api_key() -> str:
    env = os.getenv("OPENAI_API_KEY", "")
    cfg = load_config()
    return (cfg.get("openai_api_key") or env or "").strip()

def have_openai() -> bool:
    return bool(get_api_key()) and (OpenAI is not None)

def get_openai_client():
    if not have_openai():
        return None
    return OpenAI(api_key=get_api_key())

# === Recherche web ===
def ddg_snippets(query: str, max_results: int = 3) -> List[Dict[str, str]]:
    results = []
    try:
        with DDGS() as ddgs:
            for r in ddgs.text(query, max_results=max_results):
                results.append({
                    "title": r.get("title", ""),
                    "snippet": r.get("body", ""),
                    "url": r.get("href", "")
                })
    except Exception:
        pass
    return results

# === IA OpenAI ===
def ai_enrich(tool: Dict[str, Any]) -> Dict[str, Any]:
    client = get_openai_client()
    if not client:
        return {**tool, "ai_enriched": False, "ai_note": "OpenAI non configur√©"}
    
    try:
        # Recherche web pour enrichir l'analyse
        web_results = ddg_snippets(tool.get("name", "") + " " + tool.get("link", ""), max_results=5)
        web_context = ""
        if web_results:
            web_context = "\n\nInformations web trouv√©es:\n" + "\n".join([
                f"- {r.get('title', '')}: {r.get('snippet', '')[:200]}..."
                for r in web_results
            ])
        
        prompt = f"""Tu es un expert en r√©f√©rencement d'outils IA. Analyse cet outil et enrichis-le de mani√®re exhaustive.

OUTIL √Ä ANALYSER:
{json.dumps(tool, ensure_ascii=False, indent=2)}

INSTRUCTIONS:
1. Garde TOUS les champs existants (name, link, description, category, keywords, price_euros_1_to_5)
2. Am√©liore la description pour qu'elle soit pr√©cise et compl√®te
3. Analyse TOUS les angles d'usage possibles de cet outil
4. G√©n√®re jusqu'√† 20 mots-cl√©s pertinents et vari√©s
5. Cat√©gorise de mani√®re pr√©cise

EXEMPLES D'ANGLES √Ä EXPLORER:
- ChatGPT: chatbot, g√©n√©ration texte, agent IA, assistant virtuel, analyse de donn√©es, tutorat, r√©daction, traduction, brainstorming, planification, etc.
- Midjourney: g√©n√©ration d'images, art num√©rique, design, illustration, concept art, marketing visuel, etc.

R√©ponds STRICTEMENT en JSON avec:
{{
    "description": "Description am√©lior√©e et pr√©cise",
    "keywords": ["mot-cl√©1", "mot-cl√©2", "mot-cl√©3", ...],
    "category": "Cat√©gorie pr√©cise et d√©taill√©e"
}}

{web_context}"""
        
        response = client.chat.completions.create(
            model="gpt-4o-mini",
            temperature=0.2,
            messages=[{"role": "user", "content": prompt}],
            response_format={"type": "json_object"}
        )
        
        data = json.loads(response.choices[0].message.content)
        
        # Normaliser les mots-cl√©s
        keywords = data.get("keywords", [])
        if isinstance(keywords, list):
            # Nettoyer et limiter √† 20 mots-cl√©s
            clean_keywords = []
            for kw in keywords[:20]:
                if isinstance(kw, str) and kw.strip():
                    clean_keywords.append(kw.strip().lower())
            keywords = clean_keywords
        
        return {
            **tool,
            "description": data.get("description", tool.get("description", "")),
            "keywords": keywords,
            "category": data.get("category", tool.get("category", "")),
            "ai_enriched": True,
            "ai_note": "Enrichi par IA avec recherche web"
        }
    except Exception as e:
        return {**tool, "ai_enriched": False, "ai_note": f"Erreur IA: {e}"}

# === Gestion des commentaires ===
def add_comment(tool_id: str, author: str, content: str, rating: int = 0) -> None:
    comments = load_comments()
    if tool_id not in comments:
        comments[tool_id] = []
    
    comment = {
        "id": hashlib.sha1(f"{tool_id}{author}{datetime.now().isoformat()}".encode()).hexdigest()[:8],
        "author": author,
        "content": content,
        "rating": max(1, min(5, rating)),
        "timestamp": datetime.now().isoformat(),
        "likes": 0
    }
    
    comments[tool_id].append(comment)
    save_comments(comments)

def delete_comment(tool_id: str, comment_id: str) -> None:
    """Supprime un commentaire sp√©cifique"""
    comments = load_comments()
    if tool_id in comments:
        comments[tool_id] = [c for c in comments[tool_id] if c.get("id") != comment_id]
        save_comments(comments)

def get_comments(tool_id: str) -> List[Dict[str, Any]]:
    comments = load_comments()
    return comments.get(tool_id, [])

# === Gestion des liens externes ===
def add_external_link(tool_id: str, title: str, url: str, link_type: str, description: str = "") -> None:
    links = load_links()
    if tool_id not in links:
        links[tool_id] = []
    
    link = {
        "id": hashlib.sha1(f"{tool_id}{title}{datetime.now().isoformat()}".encode()).hexdigest()[:8],
        "title": title,
        "url": url,
        "type": link_type,  # "youtube", "blog", "tutorial", "other"
        "description": description,
        "added_at": datetime.now().isoformat(),
        "rating": 0
    }
    
    links[tool_id].append(link)
    save_links(links)

def get_external_links(tool_id: str) -> List[Dict[str, Any]]:
    links = load_links()
    return links.get(tool_id, [])

def delete_external_link(tool_id: str, link_id: str) -> None:
    """Supprime un lien externe sp√©cifique"""
    links = load_links()
    if tool_id in links:
        links[tool_id] = [l for l in links[tool_id] if l.get("id") != link_id]
        save_links(links)

# === Fonctions d'export/import unifi√©es ===
def export_all_data() -> Dict[str, Any]:
    """Exporte toutes les donn√©es dans un seul fichier JSON"""
    db = load_db()
    comments = load_comments()
    links = load_links()
    
    export_data = {
        "version": "1.0",
        "export_date": datetime.now().isoformat(),
        "tools": db.get("tools", []),
        "comments": comments,
        "external_links": links,
        "metadata": {
            "total_tools": len(db.get("tools", [])),
            "total_comments": sum(len(c) for c in comments.values()),
            "total_links": sum(len(l) for l in links.values())
        }
    }
    
    return export_data

def import_all_data(data: Dict[str, Any]) -> Dict[str, int]:
    """Importe toutes les donn√©es depuis un fichier JSON unifi√©"""
    results = {
        "tools_imported": 0,
        "comments_imported": 0,
        "links_imported": 0,
        "errors": []
    }
    
    try:
        # V√©rifier la version
        version = data.get("version", "1.0")
        if version != "1.0":
            results["errors"].append(f"Version non support√©e: {version}")
        
        # Importer les outils
        if "tools" in data and isinstance(data["tools"], list):
            db = load_db()
            existing_tools = {t.get("id") for t in db.get("tools", [])}
            
            for tool in data["tools"]:
                if isinstance(tool, dict) and (tool.get("name") or tool.get("link")):
                    # Normaliser l'outil
                    normalized = {
                        "name": tool.get("name", "").strip(),
                        "link": tool.get("link", "").strip(),
                        "description": tool.get("description", "").strip(),
                        "category": tool.get("category", "").strip(),
                        "keywords": tool.get("keywords", []) if isinstance(tool.get("keywords"), list) else [],
                        "price_euros_1_to_5": int(tool.get("price_euros_1_to_5", 3)),
                        "added_at": tool.get("added_at") or datetime.utcnow().isoformat() + "Z"
                    }
                    normalized["id"] = tool_id(normalized)
                    
                    # V√©rifier si pas d√©j√† pr√©sent
                    if normalized["id"] not in existing_tools:
                        db["tools"].append(normalized)
                        results["tools_imported"] += 1
                        existing_tools.add(normalized["id"])
            
            save_db(db)
        
        # Importer les commentaires
        if "comments" in data and isinstance(data["comments"], dict):
            comments = load_comments()
            for current_tool_id, tool_comments in data["comments"].items():
                if isinstance(tool_comments, list):
                    if current_tool_id not in comments:
                        comments[current_tool_id] = []
                    
                    for comment in tool_comments:
                        if isinstance(comment, dict) and comment.get("author") and comment.get("content"):
                            # V√©rifier si le commentaire existe d√©j√†
                            existing_comment_ids = {c.get("id") for c in comments[current_tool_id]}
                            if comment.get("id") not in existing_comment_ids:
                                comments[current_tool_id].append(comment)
                                results["comments_imported"] += 1
            
            save_comments(comments)
        
        # Importer les liens externes
        if "external_links" in data and isinstance(data["external_links"], dict):
            links = load_links()
            for current_tool_id, tool_links in data["external_links"].items():
                if isinstance(tool_links, list):
                    if current_tool_id not in links:
                        links[current_tool_id] = []
                    
                    for link in tool_links:
                        if isinstance(link, dict) and link.get("title") and link.get("url"):
                            # V√©rifier si le lien existe d√©j√†
                            existing_link_ids = {l.get("id") for l in links[current_tool_id]}
                            if link.get("id") not in existing_link_ids:
                                links[current_tool_id].append(link)
                                results["links_imported"] += 1
            
            save_links(links)
        
        # Importer les m√©tadonn√©es
        if "metadata" in data:
            st.info(f"üìä M√©tadonn√©es de l'export: {data['metadata']}")
        
    except Exception as e:
        results["errors"].append(f"Erreur lors de l'import: {str(e)}")
    
    return results

def get_export_filename() -> str:
    """G√©n√®re un nom de fichier d'export avec la date"""
    date_str = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"toolsorter_export_{date_str}.json"

# === Fonctions de synchronisation ===
def sync_with_external_json(file_path: str, mode: str = "import") -> Dict[str, Any]:
    """
    Synchronise avec un fichier JSON externe
    mode: "import" pour lire, "export" pour √©crire
    """
    try:
        if mode == "export":
            # Exporter toutes les donn√©es vers le fichier externe
            export_data = export_all_data()
            with open(file_path, "w", encoding="utf-8") as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            return {"success": True, "message": f"Donn√©es export√©es vers {file_path}"}
        
        elif mode == "import":
            # Importer depuis le fichier externe
            with open(file_path, "r", encoding="utf-8") as f:
                data = json.load(f)
            results = import_all_data(data)
            return {"success": True, "message": f"Import r√©ussi: {results}"}
            
    except Exception as e:
        return {"success": False, "message": f"Erreur: {str(e)}"}

def get_sync_filename() -> str:
    """G√©n√®re un nom de fichier pour la synchronisation"""
    date_str = datetime.now().strftime("%Y%m%d_%H%M%S")
    return f"juktool_sync_{date_str}.json"

# === Synchronisation JSON ‚Üî GitHub ===
def github_sync_json(mode: str = "push") -> Dict[str, Any]:
    """Synchronise le fichier JSON avec GitHub (pull/push)"""
    try:
        # V√©rifier si on est dans un repo Git
        result = subprocess.run(["git", "status"], capture_output=True, text=True, cwd=os.getcwd())
        if result.returncode != 0:
            return {"success": False, "message": "Pas de repository Git configur√©"}
        
        if mode == "push":
            # Exporter toutes les donn√©es vers un fichier JSON
            export_data = export_all_data()
            json_filename = "juktool_database.json"
            
            # Sauvegarder le JSON dans le repo
            with open(json_filename, "w", encoding="utf-8") as f:
                json.dump(export_data, f, ensure_ascii=False, indent=2)
            
            # Ajouter le fichier JSON au Git
            subprocess.run(["git", "add", json_filename], cwd=os.getcwd())
            
            # Commit avec timestamp
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            commit_msg = f"Sync JSON: {timestamp} - {export_data['metadata']['total_tools']} outils"
            
            result = subprocess.run(["git", "commit", "-m", commit_msg], capture_output=True, text=True, cwd=os.getcwd())
            if result.returncode != 0:
                if "nothing to commit" in result.stdout.lower():
                    return {"success": True, "message": "Aucun changement √† synchroniser"}
                else:
                    return {"success": False, "message": f"Erreur commit: {result.stderr}"}
            
            # Push vers GitHub
            result = subprocess.run(["git", "push"], capture_output=True, text=True, cwd=os.getcwd())
            if result.returncode == 0:
                return {"success": True, "message": f"JSON synchronis√© vers GitHub: {commit_msg}"}
            else:
                return {"success": False, "message": f"Erreur push: {result.stderr}"}
        
        elif mode == "pull":
            # Pull depuis GitHub
            result = subprocess.run(["git", "pull"], capture_output=True, text=True, cwd=os.getcwd())
            if result.returncode == 0:
                # V√©rifier si le fichier JSON existe
                json_filename = "juktool_database.json"
                if os.path.exists(json_filename):
                    # Importer les donn√©es depuis le JSON
                    with open(json_filename, "r", encoding="utf-8") as f:
                        data = json.load(f)
                    
                    # Importer les donn√©es
                    results = import_all_data(data)
                    return {"success": True, "message": f"Donn√©es r√©cup√©r√©es depuis GitHub: {results}"}
                else:
                    return {"success": True, "message": "Aucun fichier JSON trouv√© sur GitHub"}
            else:
                return {"success": False, "message": f"Erreur pull: {result.stderr}"}
                
    except Exception as e:
        return {"success": False, "message": f"Erreur synchronisation: {str(e)}"}

def git_sync_to_github() -> Dict[str, Any]:
    """Alias pour la synchronisation push"""
    return github_sync_json("push")

def git_pull_from_github() -> Dict[str, Any]:
    """Alias pour la synchronisation pull"""
    return github_sync_json("pull")

def auto_sync_worker():
    """Worker pour la synchronisation automatique toutes les 5 minutes"""
    while True:
        try:
            time.sleep(300)  # 5 minutes
            if st.session_state.get("auto_sync_enabled", False):
                # Synchronisation automatique : push des donn√©es vers GitHub
                result = github_sync_json("push")
                if result["success"]:
                    st.session_state["last_auto_sync"] = datetime.now().isoformat()
                    st.session_state["auto_sync_status"] = "success"
                    st.session_state["last_sync_message"] = result["message"]
                else:
                    st.session_state["auto_sync_status"] = "error"
                    st.session_state["last_sync_error"] = result["message"]
        except Exception as e:
            st.session_state["auto_sync_status"] = "error"
            st.session_state["auto_sync_error"] = str(e)

def start_auto_sync():
    """D√©marre la synchronisation automatique en arri√®re-plan"""
    if not st.session_state.get("auto_sync_started", False):
        st.session_state["auto_sync_started"] = True
        sync_thread = threading.Thread(target=auto_sync_worker, daemon=True)
        sync_thread.start()

# === Interface principale ===
# V√©rifier si on est sur une page d'outil sp√©cifique
tool_id_param = st.query_params.get("tool_id", None)

if tool_id_param:
    # === Page d√©taill√©e de l'outil ===
    db = load_db()
    tool = next((t for t in db.get("tools", []) if t.get("id") == tool_id_param), None)
    
    if tool:
        st.title(f"üîç {tool.get('name', 'Outil')}")
        
        # Bouton retour
        if st.button("‚Üê Retour √† la liste"):
            st.query_params.clear()
            st.rerun()
        
        # Informations principales
        col1, col2 = st.columns([2, 1])
        
        with col1:
            st.markdown(f"### üìù Description")
            st.write(tool.get('description', 'Aucune description disponible'))
            
            if tool.get('keywords'):
                st.markdown(f"### üè∑Ô∏è Mots-cl√©s")
                st.write(", ".join(tool['keywords']))
        
        with col2:
            st.markdown(f"### ‚ÑπÔ∏è Informations")
            st.write(f"**Cat√©gorie:** {tool.get('category', '‚Äì')}")
            st.write(f"**Prix:** {euros(tool.get('price_euros_1_to_5', 3))}")
            if tool.get('link'):
                st.write(f"**üîó Lien:** [{tool['link']}]({tool['link']})")
            if tool.get('ai_enriched'):
                st.write("ü§ñ *Enrichi par IA*")
        
        st.divider()
        
        # Onglets pour commentaires et liens
        tab_comments, tab_links = st.tabs(["üí¨ Commentaires", "üîó Liens externes"])
        
        # === Onglet Commentaires ===
        with tab_comments:
            st.subheader("üí¨ Commentaires et avis")
            
            # Formulaire d'ajout de commentaire
            with st.expander("‚úçÔ∏è Ajouter un commentaire", expanded=False):
                with st.form("add_comment"):
                    col1, col2 = st.columns(2)
                    with col1:
                        author = st.text_input("Votre nom", placeholder="Votre nom ou pseudo")
                    with col2:
                        rating = st.slider("Note (1-5)", 1, 5, 3)
                    
                    content = st.text_area("Votre commentaire", placeholder="Partagez votre exp√©rience avec cet outil...")
                    
                    if st.form_submit_button("üí¨ Publier"):
                        if author and content:
                            add_comment(tool_id_param, author, content, rating)
                            st.success("Commentaire ajout√© !")
                            st.rerun()
                        else:
                            st.error("Veuillez remplir tous les champs")
            
            # Affichage des commentaires
            comments = get_comments(tool_id_param)
            if comments:
                st.write(f"**{len(comments)} commentaire(s)**")
                for comment in sorted(comments, key=lambda x: x['timestamp'], reverse=True):
                    with st.container(border=True):
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            st.write(f"**{comment['author']}** - {comment['timestamp'][:10]}")
                            st.write(comment['content'])
                        with col2:
                            st.write(f"‚≠ê {'‚≠ê' * comment['rating']}")
                            col_like, col_del = st.columns(2)
                            with col_like:
                                if st.button("üëç", key=f"like_{comment['id']}"):
                                    comment['likes'] += 1
                                    save_comments(load_comments())
                                    st.rerun()
                                st.write(f"Likes: {comment['likes']}")
                            with col_del:
                                if st.button("üóëÔ∏è", key=f"del_comment_{comment['id']}", help="Supprimer ce commentaire"):
                                    delete_comment(tool_id_param, comment['id'])
                                    st.success("Commentaire supprim√© !")
                                    st.rerun()
            else:
                st.info("Aucun commentaire pour le moment. Soyez le premier !")
        
        # === Onglet Liens externes ===
        with tab_links:
            st.subheader("üîó Liens externes")
            
            # Formulaire d'ajout de lien
            with st.expander("‚ûï Ajouter un lien", expanded=False):
                with st.form("add_link"):
                    col1, col2 = st.columns(2)
                    with col1:
                        title = st.text_input("Titre du lien", placeholder="ex: Tutoriel YouTube")
                        url = st.text_input("URL", placeholder="https://...")
                    with col2:
                        link_type = st.selectbox("Type", ["youtube", "blog", "tutorial", "other"])
                        rating = st.slider("Note (1-5)", 1, 5, 3)
                    
                    description = st.text_area("Description", placeholder="Description du lien...")
                    
                    if st.form_submit_button("üîó Ajouter"):
                        if title and url:
                            add_external_link(tool_id_param, title, url, link_type, description)
                            st.success("Lien ajout√© !")
                            st.rerun()
                        else:
                            st.error("Veuillez remplir le titre et l'URL")
            
            # Affichage des liens
            links = get_external_links(tool_id_param)
            if links:
                # Filtrer par type
                link_types = ["youtube", "blog", "tutorial", "other"]
                selected_type = st.selectbox("Filtrer par type", ["Tous"] + link_types)
                
                filtered_links = links
                if selected_type != "Tous":
                    filtered_links = [l for l in links if l['type'] == selected_type]
                
                st.write(f"**{len(filtered_links)} lien(s) trouv√©(s)**")
                
                for link in filtered_links:
                    with st.container(border=True):
                        col1, col2 = st.columns([3, 1])
                        with col1:
                            # Ic√¥ne selon le type
                            icon = {"youtube": "üì∫", "blog": "üìù", "tutorial": "üìö", "other": "üîó"}.get(link['type'], "üîó")
                            st.write(f"{icon} **{link['title']}**")
                            if link['description']:
                                st.write(link['description'])
                            st.write(f"[Ouvrir le lien]({link['url']})")
                        with col2:
                            st.write(f"‚≠ê {'‚≠ê' * link['rating']}")
                            st.write(f"Type: {link['type']}")
                            st.write(f"Ajout√©: {link['added_at'][:10]}")
                            if st.button("üóëÔ∏è", key=f"del_link_{link['id']}", help="Supprimer ce lien"):
                                delete_external_link(tool_id_param, link['id'])
                                st.success("Lien supprim√© !")
                                st.rerun()
            else:
                st.info("Aucun lien externe pour le moment. Ajoutez-en un !")
    
    else:
        st.error("Outil non trouv√©")
        if st.button("‚Üê Retour √† la liste"):
            st.query_params.clear()
            st.rerun()

else:
    # === Interface principale normale ===
    tab1, tab2, tab3, tab4 = st.tabs(["‚ûï Ajouter", "üîé Recherche", "üì¶ Base", "‚öôÔ∏è Options"])

    # --- Onglet Options ---
    with tab4:
        st.subheader("Configuration OpenAI")
        cfg = load_config()
        
        api_key = st.text_input("Cl√© API OpenAI", value=cfg.get("openai_api_key", ""), type="password")
        model = st.text_input("Mod√®le", value=cfg.get("openai_model", "gpt-4o-mini"))
        
        if st.button("üíæ Sauvegarder"):
            cfg["openai_api_key"] = api_key.strip()
            cfg["openai_model"] = model.strip()
            save_config(cfg)
            st.success("Configuration sauvegard√©e !")
        
        st.divider()
        st.write("**Statut OpenAI:**", "‚úÖ Actif" if have_openai() else "‚ùå Inactif")

    # --- Onglet Ajouter ---
    with tab1:
        st.subheader("Ajouter un outil")
        
        with st.form("add_tool"):
            col1, col2 = st.columns(2)
            with col1:
                name = st.text_input("Nom*", placeholder="Ex: ChatGPT")
                link = st.text_input("Lien*", placeholder="https://...")
                description = st.text_area("Description", placeholder="Description courte")
            with col2:
                category = st.text_input("Cat√©gorie", placeholder="ex: chatbot")
                keywords = st.text_input("Mots-cl√©s (s√©par√©s par ;)", placeholder="IA; chat; texte")
                price = st.slider("Prix (1-5)", 1, 5, 3)
                use_ai = st.checkbox("Enrichir avec l'IA")
            
            submitted = st.form_submit_button("Ajouter")
            
            if submitted and name and link:
                db = load_db()
                
                tool = {
                    "name": name.strip(),
                    "link": link.strip(),
                    "description": description.strip(),
                    "category": category.strip(),
                    "keywords": normalize_kw(keywords),
                    "price_euros_1_to_5": price,
                    "added_at": datetime.utcnow().isoformat() + "Z"
                }
                
                if use_ai:
                    tool = ai_enrich(tool)
                
                tool["id"] = tool_id(tool)
                
                # V√©rifier si l'outil existe d√©j√†
                existing_ids = [t.get("id") for t in db.get("tools", [])]
                if tool["id"] in existing_ids:
                    st.warning("Cet outil existe d√©j√† !")
                else:
                    db["tools"].append(tool)
                    save_db(db)
                    st.success(f"‚úÖ {tool['name']} ajout√© !")
                    st.json(tool)

    # --- Onglet Recherche ---
    with tab2:
        st.subheader("Rechercher dans la base")
        
        query = st.text_input("Recherche", placeholder="ex: chatbot IA")
        
        # Option pour utiliser GPT
        use_gpt = st.checkbox("ü§ñ Utiliser GPT pour la recherche intelligente", value=False)
        
        if query:
            db = load_db()
            tools = db.get("tools", [])
            
            if tools:
                # √âTAPE 1: Recherche par mots-cl√©s exacts
                query_lower = query.lower()
                exact_matches = []
                
                for t in tools:
                    # V√©rifier dans le nom
                    if query_lower in t.get('name', '').lower():
                        exact_matches.append(t)
                        continue
                    
                    # V√©rifier dans les mots-cl√©s
                    if any(query_lower in kw.lower() for kw in t.get('keywords', [])):
                        exact_matches.append(t)
                        continue
                    
                    # V√©rifier dans la cat√©gorie
                    if query_lower in t.get('category', '').lower():
                        exact_matches.append(t)
                        continue
                
                # Si on a des r√©sultats exacts, les afficher
                if exact_matches:
                    st.write(f"**üéØ {len(exact_matches)} r√©sultats exacts trouv√©s**")
                    for t in exact_matches:
                        with st.container(border=True):
                            col1, col2 = st.columns([3, 1])
                            with col1:
                                st.markdown(f"### {t.get('name', 'Sans nom')}")
                                st.write(f"**Cat√©gorie:** {t.get('category', '‚Äì')} | **Prix:** {euros(t.get('price_euros_1_to_5', 3))}")
                                if t.get('description'):
                                    st.write(t['description'])
                                if t.get('link'):
                                    st.write(f"üîó {t['link']}")
                                if t.get('keywords'):
                                    st.write(f"**Mots-cl√©s:** {', '.join(t['keywords'])}")
                                if t.get('ai_enriched'):
                                    st.write("ü§ñ *Enrichi par IA*")
                            with col2:
                                if st.button("üîç Voir d√©tails", key=f"view_{t['id']}"):
                                    st.query_params["tool_id"] = t['id']
                                    st.rerun()
                
                # √âTAPE 2: Recherche intelligente seulement si pas de r√©sultats exacts
                if not exact_matches:
                    if use_gpt and have_openai():
                        st.info("üß† GPT analyse votre requ√™te et la base de donn√©es...")
                        
                        # Pr√©parer les donn√©es pour GPT
                        tools_for_gpt = []
                        for t in tools:
                            tools_for_gpt.append({
                                "id": t.get("id"),
                                "name": t.get("name", ""),
                                "description": t.get("description", ""),
                                "category": t.get("category", ""),
                                "keywords": t.get("keywords", []),
                                "link": t.get("link", "")
                            })
                        
                        try:
                            # Appel √† GPT
                            prompt = f"""Tu es un expert en outils IA. L'utilisateur cherche: "{query}"

Voici la base de donn√©es d'outils disponibles:
{json.dumps(tools_for_gpt, ensure_ascii=False, indent=2)}

Trouve les 3-5 outils les plus pertinents pour cette requ√™te. R√©ponds en JSON avec:
{{
    "analysis": "Analyse courte de la requ√™te",
    "recommendations": [
        {{
            "id": "id_de_l_outil",
            "reason": "Pourquoi cet outil est recommand√©"
        }}
    ]
}}"""

                            client = get_openai_client()
                            response = client.chat.completions.create(
                                model="gpt-4o-mini",
                                temperature=0.3,
                                messages=[{"role": "user", "content": prompt}],
                                response_format={"type": "json_object"}
                            )
                            
                            gpt_result = json.loads(response.choices[0].message.content)
                            
                            # Afficher l'analyse GPT
                            st.markdown("### ü§ñ Analyse GPT")
                            st.write(gpt_result.get("analysis", ""))
                            
                            # Afficher les recommandations
                            st.markdown("### üéØ Outils recommand√©s par GPT")
                            for rec in gpt_result.get("recommendations", []):
                                tool_id = rec.get("id")
                                tool = next((t for t in tools if t.get("id") == tool_id), None)
                                
                                if tool:
                                    with st.container(border=True):
                                        col1, col2 = st.columns([3, 1])
                                        with col1:
                                            st.markdown(f"### {tool.get('name', 'Sans nom')}")
                                            st.write(f"**Cat√©gorie:** {tool.get('category', '‚Äì')} | **Prix:** {euros(tool.get('price_euros_1_to_5', 3))}")
                                            st.write(f"**üí° Raison:** {rec.get('reason', '')}")
                                            if tool.get('description'):
                                                st.write(tool['description'])
                                            if tool.get('link'):
                                                st.write(f"üîó {tool['link']}")
                                            if tool.get('keywords'):
                                                st.write(f"**Mots-cl√©s:** {', '.join(tool['keywords'])}")
                                            if tool.get('ai_enriched'):
                                                st.write("ü§ñ *Enrichi par IA*")
                                        with col2:
                                            if st.button("üîç Voir d√©tails", key=f"gpt_view_{tool['id']}"):
                                                st.query_params["tool_id"] = tool['id']
                                                st.rerun()
                        
                        except Exception as e:
                            st.error(f"Erreur GPT: {str(e)}")
                            st.info("Retour √† la recherche classique...")
                            use_gpt = False
                    
                    # Si pas de GPT ou erreur, utiliser la recherche classique
                    if not use_gpt or not have_openai():
                        st.info("üîç Aucun r√©sultat exact trouv√©. Recherche intelligente en cours...")
                        
                        def score_tool(t):
                            text = f"{t.get('name', '')} {t.get('description', '')} {' '.join(t.get('keywords', []))} {t.get('category', '')}"
                            return fuzz.token_set_ratio(query_lower, text.lower())
                        
                        # Recherche par similarit√©
                        smart_results = sorted(tools, key=score_tool, reverse=True)[:5]
                        
                        st.write(f"**üß† {len(smart_results)} suggestions intelligentes**")
                        for t in smart_results:
                            with st.container(border=True):
                                col1, col2 = st.columns([3, 1])
                                with col1:
                                    st.markdown(f"### {t.get('name', 'Sans nom')}")
                                    st.write(f"**Cat√©gorie:** {t.get('category', '‚Äì')} | **Prix:** {euros(t.get('price_euros_1_to_5', 3))}")
                                    if t.get('description'):
                                        st.write(t['description'])
                                    if t.get('link'):
                                        st.write(f"üîó {t['link']}")
                                    if t.get('keywords'):
                                        st.write(f"**Mots-cl√©s:** {', '.join(t['keywords'])}")
                                    if tool.get('ai_enriched'):
                                        st.write("ü§ñ *Enrichi par IA*")
                                with col2:
                                    if st.button("üîç Voir d√©tails", key=f"smart_view_{t['id']}"):
                                        st.query_params["tool_id"] = t['id']
                                        st.rerun()
            else:
                st.info("Aucun outil dans la base. Ajoutez-en d'abord !")

    # --- Onglet Base ---
    with tab3:
        st.subheader("Gestion de la base")
        
        # Information sur le format d'export unifi√©
        with st.expander("‚ÑπÔ∏è Format d'export/import unifi√©", expanded=False):
            st.markdown("""
            **üì¶ Export unifi√© ToolSorter** - Un seul fichier JSON qui contient tout :
            
            - üß∞ **Outils** : Nom, description, cat√©gorie, mots-cl√©s, prix
            - üí¨ **Commentaires** : Avis des utilisateurs avec notes et likes
            - üîó **Liens externes** : YouTube, blogs, tutoriels, autres ressources
            
            **üîÑ Compatibilit√©** : 
            - ‚úÖ Import automatique des anciens formats
            - ‚úÖ D√©tection intelligente du type de fichier
            - ‚úÖ Fusion sans doublons
            - ‚úÖ M√©tadonn√©es et statistiques
            
            **üìÅ Nom du fichier** : `toolsorter_export_YYYYMMDD_HHMMSS.json`
            """)
        
        # === Synchronisation JSON ‚Üî GitHub ===
        st.subheader("üîÑ Synchronisation JSON ‚Üî GitHub")
        st.info("üí° **Synchronisation automatique** : L'app envoie/r√©cup√®re le fichier JSON depuis GitHub toutes les 5 minutes")
        
        # Initialiser la session state
        if "auto_sync_enabled" not in st.session_state:
            st.session_state["auto_sync_enabled"] = False
        if "last_auto_sync" not in st.session_state:
            st.session_state["last_auto_sync"] = None
        if "auto_sync_status" not in st.session_state:
            st.session_state["auto_sync_status"] = "idle"
        
        # D√©marrer la synchronisation automatique
        start_auto_sync()
        
        col_gh1, col_gh2, col_gh3 = st.columns(3)
        
        with col_gh1:
            # Synchronisation manuelle vers GitHub
            if st.button("üì§ Envoyer JSON vers GitHub", type="primary"):
                with st.spinner("Envoi du JSON en cours..."):
                    result = github_sync_json("push")
                    if result["success"]:
                        st.success(result["message"])
                        st.session_state["last_auto_sync"] = datetime.now().isoformat()
                        st.session_state["auto_sync_status"] = "success"
                        st.session_state["last_sync_message"] = result["message"]
                    else:
                        st.error(result["message"])
                        st.session_state["auto_sync_status"] = "error"
                        st.session_state["last_sync_error"] = result["message"]
        
        with col_gh2:
            # R√©cup√©ration depuis GitHub
            if st.button("üì• R√©cup√©rer JSON depuis GitHub"):
                with st.spinner("R√©cup√©ration du JSON en cours..."):
                    result = github_sync_json("pull")
                    if result["success"]:
                        st.success(result["message"])
                        st.rerun()  # Recharger les donn√©es
                    else:
                        st.error(result["message"])
        
        with col_gh3:
            # Activation/d√©sactivation de la synchronisation automatique
            auto_sync_enabled = st.checkbox(
                "üîÑ Sync auto (5 min)", 
                value=st.session_state.get("auto_sync_enabled", False),
                help="Synchronisation automatique toutes les 5 minutes"
            )
            st.session_state["auto_sync_enabled"] = auto_sync_enabled
        
        # Statut de la synchronisation JSON
        if st.session_state.get("last_auto_sync"):
            last_sync = datetime.fromisoformat(st.session_state["last_auto_sync"])
            time_diff = datetime.now() - last_sync
            
            if time_diff.total_seconds() < 300:  # Moins de 5 minutes
                st.success(f"‚úÖ Derni√®re sync JSON: {time_diff.total_seconds():.0f}s")
                if st.session_state.get("last_sync_message"):
                    st.info(f"üìù {st.session_state['last_sync_message']}")
            else:
                st.warning(f"‚ö†Ô∏è Derni√®re sync JSON: {time_diff.total_seconds()//60}min")
        
        if st.session_state.get("auto_sync_status") == "error":
            st.error("‚ùå Erreur de synchronisation automatique")
            if st.session_state.get("last_sync_error"):
                st.error(f"üîç D√©tail: {st.session_state['last_sync_error']}")
        
        st.divider()
        
        # === Synchronisation externe (fichier JSON) ===
        st.subheader("üìÅ Partage par fichier JSON")
        st.info("üí° **Partagez vos donn√©es** : Exportez vers un fichier JSON, puis partagez-le avec d'autres utilisateurs")
        
        col_sync1, col_sync2 = st.columns(2)
        
        with col_sync1:
            # Export pour synchronisation
            db = load_db()
            current_tools = db.get("tools", [])
            
            if current_tools:
                sync_filename = get_sync_filename()
                export_data = export_all_data()
                export_json = json.dumps(export_data, ensure_ascii=False, indent=2)
                
                st.download_button(
                    "üì§ Exporter pour partage",
                    data=export_json,
                    file_name=sync_filename,
                    mime="application/json",
                    help="Exporte toutes les donn√©es pour partage avec d'autres utilisateurs"
                )
                
                st.caption(f"üìä {len(current_tools)} outils, {sum(len(c) for c in load_comments().values())} commentaires")
            else:
                st.info("Base vide - rien √† exporter")
        
        with col_sync2:
            # Import depuis fichier externe
            uploaded_sync = st.file_uploader(
                "üì• Importer depuis partage", 
                type=["json"],
                help="Importe les donn√©es partag√©es par d'autres utilisateurs"
            )
            
            if uploaded_sync is not None:
                try:
                    content = uploaded_sync.read()
                    data = json.loads(content.decode('utf-8'))
                    
                    # Utiliser la fonction d'import unifi√©e
                    results = import_all_data(data)
                    
                    if results["errors"]:
                        st.error(f"‚ùå Erreurs: {results['errors']}")
                    
                    if results["tools_imported"] > 0 or results["comments_imported"] > 0 or results["links_imported"] > 0:
                        st.success(f"‚úÖ Synchronisation r√©ussie ! "
                                 f"{results['tools_imported']} outils, "
                                 f"{results['comments_imported']} commentaires, "
                                 f"{results['links_imported']} liens")
                        st.rerun()
                    else:
                        st.info("‚ÑπÔ∏è Aucune nouvelle donn√©e √† importer")
                        
                except Exception as e:
                    st.error(f"‚ùå Erreur d'import: {str(e)}")
        
        st.divider()
        
        db = load_db()
        tools = db.get("tools", [])
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            # Export unifi√©
            if tools:
                export_data = export_all_data()
                export_json = json.dumps(export_data, ensure_ascii=False, indent=2)
                filename = get_export_filename()
                
                st.download_button(
                    "üì• Exporter TOUT (JSON unifi√©)",
                    data=export_json,
                    file_name=filename,
                    mime="application/json",
                    help="Exporte outils + commentaires + liens externes"
                )
                
                # Afficher les statistiques
                st.caption(f"üìä {export_data['metadata']['total_tools']} outils, "
                          f"{export_data['metadata']['total_comments']} commentaires, "
                          f"{export_data['metadata']['total_links']} liens")
            else:
                st.info("Base vide")
        
        with col2:
            # Import unifi√©
            uploaded = st.file_uploader("Importer JSON unifi√©", type=["json"], 
                                      help="Importe outils + commentaires + liens externes")
            if uploaded is not None:
                try:
                    content = uploaded.read()
                    data = json.loads(content.decode('utf-8'))
                    
                    # Utiliser la fonction d'import unifi√©e
                    results = import_all_data(data)
                    
                    if results["errors"]:
                        st.error(f"Erreurs lors de l'import: {results['errors']}")
                    
                    if results["tools_imported"] > 0 or results["comments_imported"] > 0 or results["links_imported"] > 0:
                        st.success(f"‚úÖ Import r√©ussi ! "
                                 f"{results['tools_imported']} outils, "
                                 f"{results['comments_imported']} commentaires, "
                                 f"{results['links_imported']} liens")
                        st.rerun()
                    else:
                        st.info("Aucune nouvelle donn√©e √† importer")
                        
                except Exception as e:
                    st.error(f"Erreur d'import: {str(e)}")
        
        with col3:
            # Nettoyage
            if tools:
                if st.button("üßπ Nettoyer"):
                    cleaned = dedupe_tools(tools)
                    save_db({"tools": cleaned})
                    st.success(f"Base nettoy√©e : {len(cleaned)} outils uniques")
                    st.rerun()
        
        # Affichage de la base
        if tools:
            st.divider()
            st.write(f"**Base actuelle : {len(tools)} outils**")
            
            # Recherche rapide
            search = st.text_input("üîç Filtrer", placeholder="Filtrer par nom, cat√©gorie...")
            if search:
                filtered = [t for t in tools if search.lower() in 
                           f"{t.get('name', '')} {t.get('category', '')} {' '.join(t.get('keywords', []))}".lower()]
                tools_to_show = filtered
            else:
                tools_to_show = tools[:50]  # Limiter l'affichage
            
            for tool in tools_to_show:
                with st.container(border=True):
                    colA, colB, colC, colD = st.columns([3, 2, 1, 1])
                    with colA:
                        st.markdown(f"**{tool.get('name', 'Sans nom')}**")
                        if tool.get('link'):
                            st.write(f"üîó {tool['link']}")
                    with colB:
                        st.write(f"Cat√©gorie: {tool.get('category', '‚Äì')}")
                        st.write(f"Prix: {euros(tool.get('price_euros_1_to_5', 3))}")
                    with colC:
                        if st.button("üîç D√©tails", key=f"details_{tool['id']}"):
                            st.query_params["tool_id"] = tool['id']
                            st.rerun()
                    with colD:
                        if st.button("üóëÔ∏è", key=f"del_{tool['id']}"):
                            tools.remove(tool)
                            save_db({"tools": tools})
                            st.success("Supprim√© !")
                            st.rerun()
                    
                    if tool.get('description'):
                        st.write(tool['description'])
                    if tool.get('keywords'):
                        st.write(f"**Mots-cl√©s:** {', '.join(tool['keywords'])}")
        else:
            st.info("Aucun outil dans la base. Commencez par en ajouter !")
